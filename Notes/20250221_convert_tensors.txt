
Recent changes to convert_tensors:

    Initially, the convert_tensors function was designed to recursively convert PyTorch tensors to lists for JSON serialization. However, there was an issue when the function encountered tuples, as they weren't being handled in the same way as lists or dictionaries.
    We modified the convert_tensors function to handle tuples as well, ensuring that if the object is a tuple, it recursively converts the elements inside the tuple (similar to how lists and dictionaries were processed).

Updated convert_tensors function:

python
Copy
def convert_tensors(self, obj):
    """Recursively convert all tensors in obj to lists for JSON compatibility."""
    if isinstance(obj, torch.Tensor):
        return obj.tolist()  # Convert tensor to a Python list
    elif isinstance(obj, tuple):  # Added handling for tuples
        return tuple(self.convert_tensors(i) for i in obj)  # Process elements in tuple
    elif isinstance(obj, list):
        return [self.convert_tensors(i) for i in obj]  # Process elements in lists
    elif isinstance(obj, dict):
        return {k: self.convert_tensors(v) for k, v in obj.items()}  # Process dict values
    return obj  # Return unchanged if not a tensor

Recent Command for Running the Code:
You also asked about the specific command used, and here is a refresher on the command you had run, with --k 3 specified for controlling the number of top predictions (beam size):

bash
Copy
CUDA_VISIBLE_DEVICES=0 python hippo/main.py --guess \
    --source_lang arm --target_lang risc \
    --data_file json_files/euler.json \
    --predictions_folder test_folder \
    --k 3 \
    --model_name_or_path "celinelee/bartlarge_armtorisc_cloze2048" \
    --max_length 2048 \
    --is_enc_dec

Summary of Modifications and Key Points:

    convert_tensors update: We added handling for tuples so that they are recursively processed, converting any tensors within the tuple into lists.
    --k argument: You used --k 3 to specify the top-k predictions when generating translations with the model.
    JSON Serialization: After running the model and obtaining the predictions, the outputs were recursively processed with convert_tensors to ensure they could be serialized into JSON format without encountering issues with tensors.
    Tensor Handling: The core issue was ensuring that tensors and nested data structures (lists, tuples, dictionaries) could be serialized for later use.

The command should now execute as expected, and the outputs should be JSON-compatible with tensor data properly converted into lists.

